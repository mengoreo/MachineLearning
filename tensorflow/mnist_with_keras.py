# -*- coding: utf-8 -*-
"""mnist_with_keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oiMVVb4Lhf_-Po39xxZOayKLQqlQ4rds
"""

import tensorflow as tf
mnist = tf.keras.datasets.mnist # 28x28 images of hand-writen digits 0-9
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# normalize the datasets
x_train = tf.keras.utils.normalize(x_train, axis=1)
x_test = tf.keras.utils.normalize(x_test, axis=1)
print(x_train.shape)
print(x_train[0].shape)

"""Build the model"""

model = tf.keras.models.Sequential()
# first layer (input layer)
model.add(tf.keras.layers.Flatten(input_shape=(28, 28)))
# second
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
# output layer (probability distribution)
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

"""Parameters for training the model"""

model.compile(optimizer='adam',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])

"""Train the model"""

model.fit(x_train, y_train, epochs=3)

val_loss, val_acc = model.evaluate(x_test, y_test)
print(val_loss, val_acc)

import matplotlib.pyplot as plt
plt.imshow(x_train[0])
# print(x_train[0])
plt.show()

model.save('mnist_with_keras.model')

new_model = tf.keras.models.load_model('mnist_with_keras.model')

"""Predictions"""

predictions = new_model.predict([x_test])

print(predictions)
# probability distributions

import numpy as np
print(np.argmax(predictions[0]))

plt.imshow(x_test[0])
plt.show()

